def test_stationarity(timeseries, window=12, cutoff=0.05):
    
    #determining rolling statistics
    rolmean=timeseries.rolling(window).mean()
    rolstd=timeseries.rolling(window).std()
    
    #plot rolling statitics
    fig=plt.figure(figsize=(12,8))
    orig=plt.plot(timeseries,color='blue',label='Original')
    mean=plt.plot(rolmean,color='red',label='Rolling mean')
    std=plt.plot(rolstd,color='black',label='Rolling std')
    plt.legend(loc='best')
    plt.title('Rolling mean and std')
    plt.show()
    
    #perform dickey fuller test
    print("Results of dickey fuller's test:")
    dftest=adfuller(timeseries,autolag='AIC',maxlag=20)
    dfoutput=pd.Series(dftest[0:4],index=['Test statistics','p-value','#lags used','Number of observations used'])
    
    for key,value in dftest[4].items():
        dfoutput['Critical value (%s)' %key]=value
        
    p_value=dftest[1]
    
    if p_value < cutoff:
        print('p_value= %.4f. \nThe series is likely stationary' %p_value)
    else:
        print('p_value= %.4f. \nThe series is likely non-stationary' %p_value)
    
    print(dfoutput)

-------------------------------------------------------------------------------------------------------------------

from statsmodels.tsa.seasonal import seasonal_decompose

decomposition=seasonal_decompose(new_df['first difference'])

trend=decomposition.trend
seasonal=decomposition.seasonal
residual=decomposition.resid

plt.figure(figsize=(18,8))
plt.subplot(411)
plt.plot(new_df['first difference'],label='Original')
plt.legend(loc='best')

plt.subplot(412)
plt.plot(trend,label='trend')
plt.legend(loc='best')

plt.subplot(413)
plt.plot(seasonal,label='seasonal')
plt.legend(loc='best')

plt.subplot(414)
plt.plot(residual,label='residual')
plt.legend(loc='best')
plt.tight_layout()

-------------------------------------------------------------------------------------------------------------------
import statsmodels.api as sm
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

fig=plt.figure(figsize=(12,8))
ax1=fig.add_subplot(221)
fig=sm.graphics.tsa.plot_acf(new_df['first difference'],lags=35,ax=ax1)
ax2=fig.add_subplot(212)
fig=sm.graphics.tsa.plot_pacf(new_df['first difference'],lags=35,ax=ax2)

-------------------------------------------------------------------------------------------------------------------

from statsmodels.tsa.stattools import acf,pacf

lag_acf=acf(new_df['first difference'],nlags=12)
lag_pacf=pacf(new_df['first difference'],nlags=12,method='ols')

plt.figure(figsize=(12,6))
#plot acf
plt.subplot(121)
plt.plot(lag_acf)

#plot axis ([ximn,xmax,ymin,ymax])
plt.axhline(y=0,linestyle='--',color='gray')
plt.axhline(y=-1.96/np.sqrt(len(new_df)),linestyle='--',color='gray')
plt.axhline(y=1.96/np.sqrt(len(new_df)),linestyle='--',color='gray')
plt.title('Auto correlation function')

#plot pacf
plt.subplot(122)
plt.plot(lag_pacf)

#plot axis ([ximn,xmax,ymin,ymax])
plt.axhline(y=0,linestyle='--',color='gray')
plt.axhline(y=-1.96/np.sqrt(len(new_df)),linestyle='--',color='gray')
plt.axhline(y=1.96/np.sqrt(len(new_df)),linestyle='--',color='gray')
plt.title('Partial Auto correlation function')
plt.tight_layout()

-------------------------------------------------------------------------------------------------------------------
